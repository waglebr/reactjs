{"version":3,"sources":["serviceWorker.js","components/counter.jsx","components/counters.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Counter","state","counter","_this","props","value","handleIncrement","setState","handleDecrement","handleEmpty","_this2","this","react_default","a","createElement","className","id","disabled","onClick","badgeStyle","onRemove","classes","Component","Counters","quantity","handleReset","reload","handleRemove","quantityId","filter","i","map","key","ReactDOM","render","counters","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+JAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGC8DSC,6MA7EbC,MAAQ,CAAEC,QAASC,EAAKC,MAAMC,SAE9BC,gBAAkB,WAEhBH,EAAKI,SAAS,CAAEL,QAASC,EAAKF,MAAMC,QAAU,OAEhDM,gBAAkB,WAChBL,EAAKI,SAAS,CAAEL,QAASC,EAAKF,MAAMC,QAAU,OAEhDO,YAAc,WACZN,EAAKI,SAAS,CAAEL,QAAS,6EAGlB,IAAAQ,EAAAC,KACP,OAEEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBACdH,EAAAC,EAAAC,cAAA,qBAAaH,KAAKP,MAAMY,GAAxB,OAEFJ,EAAAC,EAAAC,cAAA,UACEC,UAAU,6BACVE,SAAUN,KAAKV,MAAMC,SAAW,EAChCgB,QAASP,KAAKH,iBAHhB,KAOAI,EAAAC,EAAAC,cAAA,QAAMC,UAAWJ,KAAKQ,cACI,IAAvBR,KAAKV,MAAMC,QACR,SAAWS,KAAKV,MAAMC,QACC,IAAvBS,KAAKV,MAAMC,QACX,WACAS,KAAKV,MAAMC,SAAW,EACtB,aACAS,KAAKV,MAAMC,QAAU,EACrB,SAAWS,KAAKV,MAAMC,QACtB,QAAUS,KAAKV,MAAMC,SAG3BU,EAAAC,EAAAC,cAAA,UACEC,UAAU,8BACVE,SAAUN,KAAKV,MAAMC,SAAW,EAChCgB,QAASP,KAAKL,iBAHhB,KAOAM,EAAAC,EAAAC,cAAA,UACEC,UAAU,2BACVE,SAAUN,KAAKV,MAAMC,SAAW,EAChCgB,QAASP,KAAKF,aAHhB,YAOAG,EAAAC,EAAAC,cAAA,UACEC,UAAU,4BACVG,QAAS,kBAAMR,EAAKN,MAAMgB,SAASV,EAAKN,MAAMY,MAFhD,gDAUJ,IAAIK,EAAU,mBAEd,OAAIV,KAAKV,MAAMC,SAAW,EAChBmB,EAAW,QAGM,IAAvBV,KAAKV,MAAMC,QACLmB,EAAW,YAEXA,EAAW,iBAzEHC,aCgDPC,6MA9CbtB,MAAQ,CACNuB,SAAU,CACR,CAAER,GAAI,IAAKX,MAAO,GAClB,CAAEW,GAAI,IAAKX,MAAO,GAClB,CAAEW,GAAI,IAAKX,MAAO,GAClB,CAAEW,GAAI,IAAKX,MAAO,OAGtBoB,YAAc,WACZ7B,OAAOC,SAAS6B,YAUlBC,aAAe,SAAAC,GAEb,IAAMJ,EAAWrB,EAAKF,MAAMuB,SAASK,OAAO,SAAAC,GAAC,OAAIA,EAAEd,KAAOY,IAC1DzB,EAAKI,SAAS,CAAEiB,sFAET,IAAAd,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,WACGH,KAAKV,MAAMuB,SAASO,IAAI,SAAAD,GAAC,OACxBlB,EAAAC,EAAAC,cAACZ,EAAD,CACEkB,SAAUV,EAAKiB,aACfK,IAAKF,EAAEd,GACPA,GAAIc,EAAEd,GACNX,MAAOyB,EAAEzB,UAGbO,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UACEC,UAAU,6BACVG,QAASP,KAAKc,aAFhB,iBArCeH,aCKvBW,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAAcC,SAASC,eAAe,SHyHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3ab8dc7c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  state = { counter: this.props.value };\r\n\r\n  handleIncrement = () => {\r\n    //It's necessary to use arrow function to inherit the \"this\" reference: \"function name = () => {statement}\".\r\n    this.setState({ counter: this.state.counter + 1 }); // You have to explicitly tell React what's changing so it can keep track of it.\r\n  };\r\n  handleDecrement = () => {\r\n    this.setState({ counter: this.state.counter - 1 });\r\n  };\r\n  handleEmpty = () => {\r\n    this.setState({ counter: 0 });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      // Returns a new React element:\r\n      <div>\r\n        <span className=\"badge mr-2 badge-dark\">\r\n          <h6>Product {this.props.id} :</h6>\r\n        </span>\r\n        <button\r\n          className=\"btn btn-warning btn-sm m-2\"\r\n          disabled={this.state.counter < -4 ? true : false}\r\n          onClick={this.handleDecrement}>\r\n          -\r\n        </button>\r\n\r\n        <span className={this.badgeStyle()}>\r\n          {this.state.counter === 5\r\n            ? \"Full: \" + this.state.counter\r\n            : this.state.counter === 0\r\n            ? \"Sold out\"\r\n            : this.state.counter < -4\r\n            ? \"Total loss\"\r\n            : this.state.counter < 0\r\n            ? \"Loss: \" + this.state.counter\r\n            : \"Qty: \" + this.state.counter}\r\n        </span>\r\n\r\n        <button\r\n          className=\"btn btn-success btn-sm mr-2\"\r\n          disabled={this.state.counter >= 5 ? true : false}\r\n          onClick={this.handleIncrement}>\r\n          +\r\n        </button>\r\n\r\n        <button\r\n          className=\"btn btn-light btn-sm m-2\"\r\n          disabled={this.state.counter <= 0 ? true : false}\r\n          onClick={this.handleEmpty}>\r\n          Sold out\r\n        </button>\r\n\r\n        <button\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n          onClick={() => this.props.onRemove(this.props.id)}>\r\n          Remove\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  badgeStyle() {\r\n    let classes = \"badge m-2 badge-\";\r\n\r\n    if (this.state.counter <= 0) {\r\n      return (classes += \"light\");\r\n    }\r\n\r\n    if (this.state.counter === 5) {\r\n      return (classes += \"secondary\");\r\n    } else {\r\n      return (classes += \"primary\");\r\n    }\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  state = {\r\n    quantity: [\r\n      { id: \"A\", value: 1 },\r\n      { id: \"B\", value: 2 },\r\n      { id: \"C\", value: 3 },\r\n      { id: \"D\", value: 4 }\r\n    ]\r\n  };\r\n  handleReset = () => {\r\n    window.location.reload();\r\n  };\r\n  /* handleReset = () => {\r\n    const quantity = this.state.quantity.map(i => {\r\n      i.value = 0;\r\n      return i;\r\n    });\r\n    this.setState({ quantity });\r\n  }; */\r\n\r\n  handleRemove = quantityId => {\r\n    // It's necessary to pass the ID so React can know which element to remove.\r\n    const quantity = this.state.quantity.filter(i => i.id !== quantityId); // Creates a new array filtering out the selected ID.\r\n    this.setState({ quantity }); // Because it's \"quantity : quantity\", it can be simplified to just one word.\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.quantity.map(i => (\r\n          <Counter\r\n            onRemove={this.handleRemove}\r\n            key={i.id}\r\n            id={i.id}\r\n            value={i.value}\r\n          />\r\n        ))}\r\n        <br />\r\n        <button\r\n          className=\"btn btn-primary btn-sm m-2\"\r\n          onClick={this.handleReset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Counters from \"./components/counters\";\n\nReactDOM.render(<Counters />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}